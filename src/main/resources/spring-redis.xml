<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:redis="http://www.springframework.org/schema/redis" xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/redis
    http://www.springframework.org/schema/redis/spring-redis.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    ">
    
    <context:property-placeholder order="1" location="classpath:redis.properties" ignore-unresolvable="true"/>
    <!-- Redis 2019.7.7 lwg redis配置文件-->
    <!-- 连接池参数 -->
   <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="minIdle" value="${redis.pool.minIdle}" />
        <property name="maxTotal" value="${redis.pool.maxTotal}" />
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}"></property>
        <property name="numTestsPerEvictionRun" value="${redis.pool.numTestsPerEvictionRun}"></property>
        <property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}"></property>
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
        <property name="testOnReturn" value="${redis.pool.testOnReturn}" />
        <property name="testWhileIdle" value="${redis.pool.testWhileIdle}"></property>
    </bean>
 <!-- 配置jedis连接池 -->
    <!-- <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        最大连接数
        <property name="maxTotal" value="30" />
        最大空闲连接数
        <property name="maxIdle" value="10" />
        每次释放连接的最大数目
        <property name="numTestsPerEvictionRun" value="1024" />
        释放连接的扫描间隔（毫秒）
        <property name="timeBetweenEvictionRunsMillis" value="30000" />
        连接最小空闲时间
        <property name="minEvictableIdleTimeMillis" value="1800000" />
        连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放
        <property name="softMinEvictableIdleTimeMillis" value="10000" />
        获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1
        <property name="maxWaitMillis" value="1500" />
        在获取连接的时候检查有效性, 默认false
        <property name="testOnBorrow" value="true" />
        在空闲时检查有效性, 默认false
        <property name="testWhileIdle" value="true" />
        连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true
        <property name="blockWhenExhausted" value="false" />
    </bean> -->
    
   <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="jedisPoolConfig" />
        <property name="hostName" value="${redis.host}" />
        <property name="port" value="${redis.port}" />
        <property name="password" value="${redis.pwd}" />
        <property name="usePool" value="${redis.userPool} " />
        <property name="database" value="${redis.database}" />
        <property name="timeout" value="${redis.timeout}" />
        <!-- <constructor-arg name="sentinelConfig" ref="sentinelConfig"/> -->
    </bean>
     <!-- 哨兵配置 -->
        <!-- <bean id="sentinelConfig" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
            服务名称
            <property name="master">
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <property name="name" value="mymaster"></property>
                </bean>
            </property>
            哨兵服务IP和端口
            <property name="sentinels">
                <set>
                    <bean class="org.springframework.data.redis.connection.RedisNode">
                        <constructor-arg name="host" value="${redis.host}"></constructor-arg>
                        <constructor-arg name="port" value="60000"></constructor-arg>
                    </bean>
                    <bean class="org.springframework.data.redis.connection.RedisNode">
                        <constructor-arg name="host" value="${redis.host}"></constructor-arg>
                        <constructor-arg name="port" value="60001"></constructor-arg>
                    </bean>
                    <bean class="org.springframework.data.redis.connection.RedisNode">
                        <constructor-arg name="host" value="${redis.host}"></constructor-arg>
                        <constructor-arg name="port" value="60002"></constructor-arg>
                    </bean>
                </set>
            </property>
        </bean> -->
    <!-- 集群 -->
     <!-- <bean id="jedisCluster" class="redis.clients.jedis.JedisCluster">
          <constructor-arg name="jedisClusterNode">
              <set>
                  <bean class="redis.clients.jedis.HostAndPort">
                      <constructor-arg  name="host" value="127.0.0.1"></constructor-arg>
                      <constructor-arg name="port" value="6380"></constructor-arg>
                  </bean>
                  <bean class="redis.clients.jedis.HostAndPort">
                      <constructor-arg  name="host" value="127.0.0.1"></constructor-arg>
                      <constructor-arg name="port" value="6381"></constructor-arg>
                  </bean>`
                  <bean class="redis.clients.jedis.HostAndPort">
                      <constructor-arg  name="host" value="127.0.0.1"></constructor-arg>
                      <constructor-arg name="port" value="6382"></constructor-arg>
                  </bean>
              </set>
          </constructor-arg>
          <constructor-arg name="connectionTimeout" value="10000" type="int" />
        <constructor-arg name="soTimeout" value="10000" type="int" />
        <constructor-arg name="maxAttempts" value="200" type="int" />
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"></constructor-arg>
      </bean> -->
 
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        
        <!-- 序列化方式 建议key/hashKey采用StringRedisSerializer -->
        <property name="keySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
         <!-- 开启REIDS事务支持 -->
         <property name="enableTransactionSupport" value="false" />
    </bean>
 
    <!-- 对string操作的封装 -->
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <constructor-arg ref="jedisConnectionFactory" />
            <!-- 开启REIDS事务支持 -->  
         <property name="enableTransactionSupport" value="false" />
    </bean>
    
</beans>