<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/tx
        				http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        				http://www.springframework.org/schema/aop 
        				http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 数据源 -->
	<!--see https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE -->
	<bean name="kqds" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${db.jdbc.conurl}" />
		<property name="username" value="${db.jdbc.userName}" />
		<property name="password" value="${db.jdbc.passward}" />
		<property name="dbType" value="${db.jdbc.dbms}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${db.jdbc.initialSize}" />
		<property name="minIdle" value="${db.jdbc.maxIdle}" />
		<property name="maxActive" value="${db.jdbc.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${db.jdbc.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${db.jdbc.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${db.jdbc.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${db.jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${db.jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${db.jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${db.jdbc.testOnReturn}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
		<property name="poolPreparedStatements" value="${db.jdbc.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${db.jdbc.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${db.jdbc.filters}" />

	</bean>
	
	<!-- 数据源 开票系统-->
	<!--see https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE -->
	<!-- <bean name="kqdskp" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		基本属性 url、user、password
		<property name="url" value="${KAIPIAO_URL}" />
		<property name="username" value="${KAIPIAO_USER}" />
		<property name="password" value="${KAIPIAO_PASSWORD}" />
		<property name="dbType" value="${db.jdbc.dbms}" />

		配置初始化大小、最小、最大
		<property name="initialSize" value="${db.jdbc.initialSize}" />
		<property name="minIdle" value="${db.jdbc.maxIdle}" />
		<property name="maxActive" value="${db.jdbc.maxActive}" />

		配置获取连接等待超时的时间
		<property name="maxWait" value="${db.jdbc.maxWait}" />
		配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		<property name="timeBetweenEvictionRunsMillis" value="${db.jdbc.timeBetweenEvictionRunsMillis}" />

		配置一个连接在池中最小生存的时间，单位是毫秒
		<property name="minEvictableIdleTimeMillis" value="${db.jdbc.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${db.jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${db.jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${db.jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${db.jdbc.testOnReturn}" />

		打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。
		<property name="poolPreparedStatements" value="${db.jdbc.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${db.jdbc.maxPoolPreparedStatementPerConnectionSize}" />

		配置监控统计拦截的filters
		<property name="filters" value="${db.jdbc.filters}" />+
	</bean> -->

 	<bean id="dataSource" class="com.kqds.util.sys.connection.DataSources">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="KQDS" value-ref="kqds" />
                <!-- <entry key="KQDSKP" value-ref="kqdskp" /> -->
                <!-- 这里还可以加多个dataSource -->
            </map>
        </property>
    </bean>
    
	<bean id="sqlSessionFactory" class="com.kqds.util.sys.PackagesSqlSessionFactoryBean"> <!-- 重载，使包别名支持通配符 -->
		<!-- 配置数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描 Xml 文件位置 -->
		<property name="mapperLocations" value="classpath:/mappings/**/*.xml" />
		<!-- 配置 Mybatis 配置文件（可无） -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="configurationProperties">
			<props>
				<prop key="dbType">${db.jdbc.dbms}</prop>
			</props>
		</property>
		<!-- 配置包别名 -->
		<property name="typeAliasesPackage" value="com.kqds.entity.**" />
		<!-- 以上配置和传统 Mybatis 一致 -->
		<property name="plugins">
			<array>
				<bean class="com.kqds.util.sys.interceptor.OldDBOperaterInterceptor" /> <!--  SELECT TOP 多数据库支持  -->
				<bean class="com.kqds.util.sys.interceptor.JSONObjectResultTypeInterceptor" />
			</array>
		</property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
 	<!-- sql会话模版 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 开启事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	 <!--7 aspectj支持自动代理实现AOP功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
</beans>